from fastapi import FastAPI
from contextlib import asynccontextmanager
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.routing import APIRoute
from sqladmin import Admin

import logging

from db.database import database
from db.models_orm import Base
from db.database import engine
from admin.panel import CheeseAdmin, CategoryAdmin, BlogAdmin


# –ë–∞–∑–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
uvicorn_access_logger = logging.getLogger("uvicorn.access")

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ (–¥–ª—è SQLite —Ç–∞ —ñ–Ω—à–∏—Ö)
Base.metadata.create_all(bind=engine)

@asynccontextmanager
async def lifespan(app: FastAPI):
    await database.connect()

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ SQLAdmin –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º root_path
    print("üîß Registering admin panel...")
    admin = Admin(app=app, engine=engine, base_url="/api/admin")
    print("‚úÖ Initializing SQLAdmin with base_url=/api/admin")
    admin.add_view(CheeseAdmin)
    admin.add_view(CategoryAdmin)
    admin.add_view(BlogAdmin)

    # –í–∏–≤–æ–¥–∏–º–æ –≤—Å—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –¥–µ–±–∞–≥—É
    for route in app.routes:
        if isinstance(route, APIRoute):
            print(f"{route.path} -> {route.name}")

    yield

    await database.disconnect()

# –°—Ç–≤–æ—Ä—é—î–º–æ FastAPI –∑ root_path, –ø–æ—Ç—Ä—ñ–±–Ω–∏–º –¥–ª—è reverse proxy
app = FastAPI(lifespan=lifespan, root_path="/api")

# –°—Ç–∞—Ç–∏–∫–∞ SQLAdmin
app.mount(
    "/api/static",
    StaticFiles(directory="/home/api-aio/.local/lib/python3.12/site-packages/sqladmin/statics"),
    name="static"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ä–æ—É—Ç—ñ–≤
from routes import cheese, categories, blogs
app.include_router(cheese.router)
app.include_router(categories.router)
app.include_router(blogs.router)
